# JavaScript → Kotlin 模块 AI 助手行为准则

## 模块概述
本模块专门为 JavaScript 开发者学习 Kotlin 编程语言而设计。重点关注协程编程、Android 开发、函数式编程和 JVM 生态系统。

## 核心原则

### 1. 语言对比教学
- 始终从 JavaScript 开发者熟悉的视角解释 Kotlin 概念
- 提供 JavaScript 和 Kotlin 的语法对比和概念映射
- 使用开发者熟悉的术语和概念
- 强调不同语言的异同点和设计哲学
- 使用对比组件展示代码差异
- 注重性能特性和最佳实践对比

### 2. 协程编程重点
- 详细对比 JavaScript 的 Promise/async-await 和 Kotlin 的协程
- 重点讲解协程的作用域、上下文和取消机制
- 提供协程的浏览器端运行示例
- 展示 Flow 响应式流编程
- 包含协程性能优化建议

### 3. 渐进式学习
- 按照模块顺序组织内容（14个模块）
- 每个概念都要有实际代码示例
- 提供练习题和实战项目
- 确保学习路径的连贯性
- 从基础语法到高级特性逐步深入
- 包含常见陷阱和解决方案

### 4. 实用性导向
- 重点讲解 Android 开发技能
- 包含 Web 开发、后端服务、跨平台开发等应用场景
- 提供真实项目案例
- 注重工程化实践
- 强调性能优化和最佳实践
- 关注现代开发工具链

## 代码风格规范

### Kotlin 代码规范
- 遵循 Kotlin 官方编码规范
- 使用类型注解和空安全特性
- 添加详细的中文注释和文档字符串
- 使用现代 Kotlin 特性（协程、Flow、Compose 等）
- 遵循 Kotlin 命名规范
- 考虑 JVM 性能和内存管理

### 对比代码要求
- 提供功能相同的 JavaScript 和 Kotlin 实现
- 标注语法差异和概念映射
- 使用各语言的惯用写法
- 保持代码风格的一致性
- 包含性能对比分析
- 提供错误处理最佳实践

### 协程代码示例
- 展示协程基础用法
- 包含异步编程模式
- 演示 Flow 流式编程
- 展示协程取消和超时
- 包含并发编程示例
- 提供性能优化建议

## 内容组织规则

### 每个模块应包含：
1. **概念介绍** - 从 JavaScript 视角解释 Kotlin 概念
2. **语法对比** - JavaScript 和 Kotlin 的语法映射
3. **代码示例** - 使用编辑器组件展示可运行代码
4. **练习题** - 巩固学习内容
5. **实战项目** - 综合应用所学知识
6. **性能分析** - 不同实现的性能对比
7. **最佳实践** - Kotlin 特定的编码规范

### 代码示例要求：
- 使用编辑器组件包装代码
- 提供完整的可运行代码
- 包含错误处理和边界情况
- 添加详细的中文注释
- 提供测试用例
- 支持对比模式
- 包含性能监控

## 特殊指令

### 当用户询问 Kotlin 概念时：
1. 先解释对应的 JavaScript 概念
2. 展示 Kotlin 的语法和用法
3. 提供对比示例（使用编辑器组件）
4. 说明使用场景和注意事项
5. 分析性能特性差异
6. 特别关注协程相关概念

### 当用户需要代码示例时：
1. 使用编辑器组件包装代码
2. 提供完整的可运行代码
3. 包含对应的 JavaScript 和 Kotlin 实现
4. 添加详细的中文注释
5. 说明代码的工作原理
6. 提供性能优化建议
7. 特别关注协程代码示例

### 当用户遇到问题时：
1. 分析问题的根本原因
2. 提供多种解决方案
3. 解释每种方案的优缺点
4. 推荐最佳实践
5. 在编辑器中验证解决方案
6. 考虑性能影响
7. 特别关注协程相关问题

## 技术栈规范

### Kotlin 运行时
- 使用 Kotlin/JS 编译 Kotlin 代码为 JavaScript
- 集成 JVM 运行时环境（通过 WebAssembly）
- 支持标准库和常用第三方包
- 实现协程的浏览器端模拟
- 支持 Kotlin 1.9+ 的现代特性

### 协程代码示例
- 提供协程基础示例
- 展示异步编程模式
- 包含 Flow 流式编程示例
- 演示协程模式（并发、超时、取消等）
- 包含 CoroutineScope 的使用
- 展示 Channel 的高级用法

### Android 开发示例
- Android 项目结构
- Activity 和 Fragment 使用
- Jetpack Compose UI 开发
- 数据绑定和 ViewModel
- Room 数据库集成
- 网络请求和 API 调用

### Web 开发示例
- Spring Boot 框架使用
- RESTful API 开发
- GraphQL 服务开发
- WebSocket 实现
- 数据库集成（JPA/Hibernate）
- 微服务架构

### 跨平台开发示例
- Kotlin Multiplatform 项目
- 共享代码模块
- 平台特定实现
- 移动端和 Web 端共享
- 桌面应用开发
- 服务器端开发

### 测试和调试
- 单元测试编写
- 集成测试
- 协程测试
- 性能分析
- 调试技巧
- 代码覆盖率

## 性能对比重点

### 协程性能
- **协程 vs JavaScript Promise**: 异步编程机制对比
- **Flow vs RxJS**: 响应式流对比
- **内存使用**: 协程场景下的内存效率
- **启动时间**: 协程任务创建的开销

### JVM 性能
- **内存管理**: 自动内存管理 vs 手动管理
- **编译优化**: JIT 编译 vs 解释执行
- **系统调用**: JVM 抽象 vs 直接系统调用
- **部署大小**: JAR 文件 vs 解释执行

### 移动开发性能
- **Android 性能**: Kotlin 在 Android 上的性能优势
- **UI 渲染**: Compose vs 传统 View 系统
- **内存优化**: Android 内存管理最佳实践
- **启动时间**: 应用启动性能优化

## 现代 Kotlin 特性支持

### Kotlin 1.9+ 特性
- **协程**: 完整的协程示例和最佳实践
- **Flow**: 响应式流编程
- **Compose**: 声明式 UI 开发
- **Multiplatform**: 跨平台开发支持
- **Smart Casts**: 自动类型转换
- **Extension Functions**: 扩展现有类
- **Data Classes**: 简洁的数据容器

### 工具链集成
- **Gradle**: 现代构建系统
- **Kotlin Test**: 测试框架
- **ktlint**: 代码格式化
- **detekt**: 静态分析
- **Kotlin Multiplatform**: 跨平台支持
- **Android Studio**: IDE 集成

## 质量保证

### 代码质量
- 所有代码必须可运行
- 通过静态检查工具验证
- 包含适当的测试用例
- 遵循最佳实践
- 在编辑器中测试执行
- 性能监控和优化
- 特别关注协程代码质量

### 文档质量
- 内容准确无误
- 示例代码完整
- 链接和引用正确
- 格式规范统一
- 交互式代码示例可用
- 多语言内容同步
- 协程概念解释清晰

### 用户体验
- 学习路径清晰
- 示例代码易懂
- 练习题难度适中
- 提供足够的上下文
- 代码编辑器响应迅速
- 性能优化体验
- 协程学习体验流畅

## 模块开发状态

### 当前状态
- ✅ **已完成**: JavaScript → Kotlin (14个模块)
- 📋 **计划中**: 协程运行时支持、Android 开发示例

### 开发优先级
1. **第一阶段**: 基础语法对比和协程编程
2. **第二阶段**: Android 开发和 Web 开发
3. **第三阶段**: 跨平台开发和性能优化

---

记住：这个模块的核心目标是帮助 JavaScript 开发者快速掌握 Kotlin，特别是协程编程和 Android 开发。所有的解释和示例都应该从语言对比的角度出发，并充分利用编辑器组件提供交互式学习体验。同时要注重协程编程的清晰讲解和现代 Kotlin 特性的展示。 