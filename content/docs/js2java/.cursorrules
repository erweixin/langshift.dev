# JavaScript → Java 模块 - AI 助手行为准则

## 模块概述
本模块专门为 JavaScript 开发者学习 Java 编程语言而设计，重点关注面向对象编程、企业级开发、Spring 框架和现代 Java 特性。

## 核心原则

### 1. 面向对象编程重点
- 始终从 JavaScript 的原型继承视角解释 Java 的类继承
- 强调 Java 的强类型系统与 JavaScript 的动态类型对比
- 详细讲解封装、继承、多态等 OOP 概念
- 提供设计模式的实际应用示例
- 对比 JavaScript 的函数式特性与 Java 的面向对象特性

### 2. 企业级开发导向
- 重点介绍 Java 在企业级应用中的优势
- 详细讲解 Spring 框架的使用
- 强调代码质量和最佳实践
- 提供企业级项目的实际案例
- 介绍 Java 生态系统和工具链

### 3. 性能优化关注
- 详细讲解 JVM 内存管理
- 提供性能优化最佳实践
- 对比不同实现的性能差异
- 介绍 JVM 调优技术
- 强调并发编程的性能考虑

## 代码示例要求

### 对比代码格式
```mdx
<UniversalEditor title="示例标题" compare={true}>
```javascript !! js
// JavaScript 代码
let name = "LangShift";
console.log(name);
```

```java !! java
// Java 代码
String name = "LangShift";
System.out.println(name);
```
</UniversalEditor>
```

### 代码质量要求
- 所有 Java 代码必须符合 Java 编码规范
- 使用有意义的变量和方法名
- 添加详细的中文注释
- 包含适当的异常处理
- 遵循 SOLID 原则
- 使用现代 Java 特性（Java 8+）

### 面向对象示例要求
- 提供完整的类定义
- 展示继承和多态
- 包含接口和抽象类示例
- 演示设计模式应用
- 对比 JavaScript 的原型继承

## 内容组织规则

### 每个模块应包含：
1. **概念对比** - 从 JavaScript 视角解释 Java 概念
2. **语法映射** - 语言间的语法对比
3. **代码示例** - 使用编辑器组件展示可运行代码
4. **最佳实践** - Java 特定的编码规范
5. **性能分析** - 不同实现的性能对比
6. **练习题** - 巩固学习内容
7. **实战项目** - 企业级应用示例

### 特殊内容要求：
- **Spring 框架**：重点讲解依赖注入、IoC 容器、AOP 等概念
- **并发编程**：详细讲解线程、同步、并发集合等
- **JVM 特性**：解释垃圾回收、内存管理、性能调优
- **现代 Java**：介绍 Lambda、Stream API、Optional 等特性

## 技术实现重点

### Java 运行时支持
- 集成 WebAssembly 编译环境
- 支持 TeaVM 或其他 WASM 编译工具
- 实现 Spring 框架核心功能的浏览器端模拟
- 支持 JVM 字节码执行（模拟）

### 编辑器组件配置
- 支持 Java 语法高亮
- 集成 Java 代码格式化
- 提供代码补全和错误检查
- 支持 Spring 框架相关代码

## 学习路径设计

### 渐进式学习
1. **基础语法** (模块 0-5)：掌握 Java 基础语法和类型系统
2. **面向对象** (模块 6-10)：深入学习 OOP 概念和设计模式
3. **高级特性** (模块 11-14)：学习集合、并发和 Spring 框架
4. **实战应用** (模块 15-19)：构建企业级项目并优化性能

### 实践项目要求
- 简单的计算器应用
- 学生管理系统
- RESTful API 服务
- 数据库 CRUD 应用
- 多线程下载应用
- Spring Boot 微服务

## 性能优化重点

### JVM 优化
- 内存管理最佳实践
- 垃圾回收调优
- 并发性能优化
- 应用启动优化
- 性能监控工具使用

### 代码优化
- 算法复杂度分析
- 数据结构选择
- 缓存策略优化
- 数据库查询优化
- 网络请求优化

## 企业级开发集成

### 开发工具
- Maven/Gradle 构建工具
- IntelliJ IDEA 集成
- Git 版本控制
- CI/CD 流程
- 测试框架（JUnit）

### Spring 生态系统
- Spring Boot 自动配置
- Spring Data JPA
- Spring Security
- Spring Cloud
- 微服务架构

## 错误处理最佳实践

### 异常处理
- 使用适当的异常类型
- 避免捕获通用异常
- 提供有意义的错误信息
- 实现优雅的错误恢复
- 记录详细的错误日志

### 调试技巧
- IDE 调试器使用
- 日志记录最佳实践
- 性能分析工具
- 内存泄漏检测
- 并发问题调试

## 代码质量保证

### 编码规范
- 遵循 Java 官方编码规范
- 使用有意义的命名约定
- 保持代码简洁和可读性
- 添加适当的文档注释
- 实现单元测试覆盖

### 设计原则
- 遵循 SOLID 原则
- 使用设计模式
- 实现依赖注入
- 保持模块化设计
- 考虑可扩展性

## 特殊技术考虑

### 并发编程
- 线程安全设计
- 同步机制选择
- 死锁预防
- 并发集合使用
- 异步编程模式

### 内存管理
- 对象生命周期管理
- 内存泄漏预防
- 垃圾回收优化
- 堆内存调优
- 栈内存管理

### Spring 框架特性
- 依赖注入容器
- AOP 编程
- 事务管理
- 安全框架
- 微服务架构

## 学习资源推荐

### 官方文档
- Java 官方文档
- Spring 框架文档
- JVM 规范文档
- Java 编码规范

### 工具推荐
- IntelliJ IDEA
- Eclipse
- Maven/Gradle
- JUnit
- Spring Boot CLI

### 最佳实践
- Java 设计模式
- Spring 最佳实践
- 性能优化指南
- 安全编程实践
- 测试驱动开发

---

**注意**: 本模块特别强调面向对象编程、企业级开发、Spring 框架和现代 Java 特性。所有代码示例都应该体现 Java 的最佳实践，并帮助 JavaScript 开发者理解 Java 的设计哲学和编程范式。 