# Python → JavaScript 模块 - Cursor 规则

## 模块概述
本模块专门为有 Python 后端开发经验的开发者设计，帮助他们快速掌握 JavaScript 和前端开发技能，实现从后端开发者到全栈开发者的转型。重点关注异步编程模式转换、前端开发概念引入、Web 框架对比和全栈开发最佳实践。

## 核心学习目标

### 主要转换方向
- **从服务器端到客户端**: 理解浏览器运行环境和前端开发特点
- **从同步到异步**: 掌握 JavaScript 的异步编程模式
- **从类到原型**: 理解 JavaScript 的原型继承机制
- **从 Django/Flask 到前端框架**: 掌握现代前端框架使用
- **从 pip 到 npm**: 适应 JavaScript 生态系统

### 特殊关注点
- **前端开发概念**: HTML、CSS、JavaScript 协同工作
- **DOM 操作**: 浏览器文档对象模型操作
- **事件驱动编程**: 用户交互和事件处理
- **异步编程转换**: asyncio vs Promise/async-await
- **构建工具生态**: webpack、vite 等现代构建工具
- **全栈开发**: Node.js 后端开发和前后端分离架构

## AI 助手行为准则

### 回答风格
- 始终从 Python 开发者的视角出发
- 重点强调前端开发的核心概念
- 详细解释异步编程的差异
- 提供完整的浏览器端代码示例
- 关注实际项目中的应用场景
- 强调现代 JavaScript 开发最佳实践

### 代码示例要求
- **对比优先**: 每个 JavaScript 概念都要有对应的 Python 实现对比
- **可执行性**: 所有代码都必须能在相应环境中运行
- **前端特色**: 重点展示浏览器环境的特殊性
- **现代语法**: 使用 ES6+ 现代 JavaScript 语法
- **异步重点**: 详细展示异步编程模式
- **完整示例**: 提供完整的 HTML、CSS、JavaScript 示例

### 概念解释策略
1. **Python 类比**: 先从 Python 中的相似概念开始
2. **差异分析**: 详细分析两种语言的不同之处
3. **应用场景**: 说明在实际开发中的使用场景
4. **最佳实践**: 提供现代开发的最佳实践
5. **常见陷阱**: 指出 Python 开发者容易犯的错误

## 内容组织规范

### 模块内容结构
每个模块应包含以下部分：
1. **概念对比**: Python vs JavaScript 概念映射
2. **语法差异**: 详细的语法对比分析
3. **实用示例**: 可运行的完整代码示例
4. **项目应用**: 在实际项目中的应用方式
5. **最佳实践**: 现代开发的推荐做法
6. **练习题**: 巩固学习的实践练习
7. **常见问题**: Python 开发者的常见困惑解答

### 代码示例规范
<PythonEditor title="示例标题" compare={true}>
```python !! py
# Python 代码示例
def async_example():
    import asyncio
    
    async def fetch_data():
        await asyncio.sleep(1)
        return "Python 异步数据"
    
    async def main():
        result = await fetch_data()
        print(result)
    
    asyncio.run(main())
```

```javascript !! js
// JavaScript 代码示例
function asyncExample() {
    async function fetchData() {
        await new Promise(resolve => setTimeout(resolve, 1000));
        return "JavaScript 异步数据";
    }
    
    async function main() {
        const result = await fetchData();
        console.log(result);
    }
    
    main();
}
```
</PythonEditor>

### 前端示例规范
```html
<!-- 完整的 HTML 示例 -->
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Python 开发者的 JavaScript 示例</title>
    <style>
        /* CSS 样式 */
        .container { 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px; 
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>前端开发示例</h1>
        <button id="fetchBtn">获取数据</button>
        <div id="result"></div>
    </div>
    
    <script>
        // JavaScript 代码
        document.getElementById('fetchBtn').addEventListener('click', async () => {
            const result = await fetchData();
            document.getElementById('result').textContent = result;
        });
    </script>
</body>
</html>
```

## 技术要点解释

### 异步编程重点
- **Python asyncio**: 协程、事件循环、await 语法
- **JavaScript Promise**: Promise 链、async/await、错误处理
- **对比要点**: 语法相似性、执行模型差异、错误处理机制
- **实际应用**: 网络请求、文件操作、用户交互

### 前端开发核心概念
- **DOM 操作**: 元素选择、内容修改、样式控制
- **事件处理**: 用户交互、事件冒泡、事件委托
- **AJAX/Fetch**: 异步数据获取、API 调用、错误处理
- **现代框架**: React、Vue、Angular 基础概念

### 运行环境差异
- **Python 解释器 vs 浏览器**: 运行环境的本质差异
- **服务器端 vs 客户端**: 开发思维的转换
- **同步 vs 异步**: 编程模式的根本变化
- **模块系统**: CommonJS、ES Modules vs Python imports

## 实际项目导向

### 项目类型
1. **静态网页**: HTML + CSS + JavaScript 基础项目
2. **动态应用**: 单页应用 (SPA) 开发
3. **API 客户端**: 前端调用后端 API 的项目
4. **全栈应用**: Node.js + 前端框架的完整应用
5. **实时应用**: WebSocket、Server-Sent Events 应用

### 技术栈对比
- **Python Web**: Django/Flask + 模板引擎
- **JavaScript Web**: Express.js + 前端框架
- **数据处理**: pandas vs JavaScript 数组方法
- **API 开发**: Django REST vs Express.js
- **数据库**: SQLAlchemy vs Sequelize/Prisma

## 学习路径建议

### 阶段 1: 语法基础 (Module 0-2)
- 基本语法对比和数据类型
- 函数定义和作用域规则
- 动态类型系统的细微差异

### 阶段 2: 核心概念 (Module 3-5)
- 函数和作用域深入理解
- 异步编程模式转换
- 前端开发核心概念引入

### 阶段 3: 实践应用 (Module 6-9)
- DOM 操作和事件处理
- Web 框架选择和使用
- Node.js 后端开发
- 包管理和生态系统

### 阶段 4: 进阶技能 (Module 10-13)
- 测试和调试技巧
- 构建工具和开发流程
- 实战项目开发
- 全栈开发最佳实践

## 常见困惑点解答

### this 关键字理解
- Python 的 self vs JavaScript 的 this
- this 的动态绑定机制
- 箭头函数中的 this 行为
- bind、call、apply 方法的使用

### 作用域和闭包
- Python 的 LEGB 规则 vs JavaScript 的作用域链
- 函数作用域和块级作用域
- 闭包的概念和实际应用
- 模块作用域的差异

### 原型和继承
- Python 的类继承 vs JavaScript 的原型继承
- 构造函数和类语法
- 原型链的工作机制
- 现代类语法的使用

### 异步编程模型
- asyncio 事件循环 vs JavaScript 事件循环
- 回调函数、Promise、async/await 演进
- 错误处理和异常传播
- 并发执行模式对比

## 性能考虑

### 前端性能优化
- **加载优化**: 代码分割、懒加载、缓存策略
- **执行优化**: 防抖、节流、虚拟化
- **内存管理**: 垃圾回收、内存泄漏防范
- **用户体验**: 响应时间、交互反馈

### 后端性能对比
- **Node.js 特性**: 事件驱动、非阻塞 I/O
- **Python 对比**: GIL 限制、多进程模型
- **适用场景**: I/O 密集 vs CPU 密集
- **扩展策略**: 水平扩展、微服务架构

## 实战项目建议

### 初级项目
1. **待办事项应用**: DOM 操作和本地存储
2. **计算器**: 事件处理和状态管理
3. **天气应用**: API 调用和数据展示

### 中级项目
1. **博客系统**: 前后端分离架构
2. **聊天应用**: WebSocket 实时通信
3. **电商原型**: 复杂状态管理

### 高级项目
1. **协作工具**: 实时协作功能
2. **数据可视化**: 图表和交互
3. **微前端**: 大型应用架构

## 质量标准

### 代码质量
- 所有示例代码必须可执行
- 遵循现代 JavaScript 最佳实践
- 包含适当的错误处理
- 提供完整的项目结构

### 教学质量
- 概念解释清晰准确
- 从 Python 视角出发的类比恰当
- 实例丰富且贴近实际应用
- 学习路径循序渐进

### 用户体验
- 内容组织逻辑清晰
- 代码示例易于理解和运行
- 提供充分的实践机会
- 关注 Python 开发者的特殊需求

## 特别注意事项

### Python 开发者转型重点
1. **思维转换**: 从服务器端到客户端的思维模式转换
2. **环境适应**: 浏览器环境的限制和特殊性
3. **工具链**: 现代前端工具链的复杂性和必要性
4. **生态系统**: npm 生态的丰富性和版本管理
5. **异步编程**: 事件驱动编程模式的深入理解

### 避免的陷阱
1. **过度复杂化**: 不要过早引入复杂的框架概念
2. **语法混淆**: 清楚区分 Python 和 JavaScript 的语法差异
3. **环境局限**: 理解浏览器和 Node.js 的不同限制
4. **工具依赖**: 理解但不过度依赖构建工具

---

**注意**: 本模块是 LangShift.dev 平台首个涉及前端开发的完整模块，特别针对 Python 后端开发者转型全栈开发的需求设计。重点解决前端概念引入、异步编程转换和全栈开发能力培养等核心问题。
